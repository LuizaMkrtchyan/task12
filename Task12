using System;

abstract class Sorter
{
    //for Bub and Sel
    protected int key = 0;
    //For Sel
    protected int minVal = 0;
    protected int minIndex = 0;

    public void Sort(ref int[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            minIndex = i - 1;
            minVal = arr[i - 1];

            for (int j = GetJ(i); Check(j, arr) && CheckForInsertion(key, arr[j]); JStep(ref j))
            {
                try { key = arr[j + 1]; }
                catch { key = 0; }
                if (CondForSelectionAndBubble(arr[j], key, minVal))
                {
                    SwapForBubbleAndInsertion(j - 1, j, ref arr);
                    //for Selection
                    minVal = arr[j];
                    minIndex = j;
                }
            }
            SwapForSelection(i - 1, minIndex, ref arr);
        }
        Output(arr);
    }
    public void Output(int[] arr)
    {
        for (int i = 0; i < arr.Length; i++)
        {
            Console.Write(arr[i] + " ");
        }
        Console.WriteLine("\n");
    }

    //For Second Loop Values
    protected abstract int GetJ(int i);
    protected abstract void JStep(ref int j);
    protected abstract bool Check(int j, int[] arr);

    //Specific parts of each
    protected abstract bool CondForSelectionAndBubble(int i, int j, int z);
    protected abstract void SwapForBubbleAndInsertion(int i, int j, ref int[] arr);
    protected abstract bool CheckForInsertion(int i, int j);
    protected abstract void SwapForSelection(int i, int j, ref int[] arr);
}
class BubbleSort : Sorter
{
    protected override int GetJ(int i)
    {
        return 0;
    }
    protected override bool Check(int j, int[] arr)
    {
        if (j < arr.Length - 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void JStep(ref int j)
    {
        j++;
    }
    protected override bool CondForSelectionAndBubble(int item1, int item2, int k)
    {
        if (item1 > item2)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void SwapForBubbleAndInsertion(int index1, int index2, ref int[] arr)
    {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
    protected override void SwapForSelection(int index1, int index2, ref int[] arr)
    {
        return;
    }
    protected override bool CheckForInsertion(int i, int j)
    {
        return true;
    }
}
class InsertionSort : Sorter
{
    protected override int GetJ(int i)
    {
        return i;
    }
    protected override bool Check(int j, int[] arr)
    {
        try { key = arr[j - 1]; } 
        catch { key = 0; }
        if (j > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void JStep(ref int j)
    {
        j--;
    }
    protected override bool CheckForInsertion(int i, int j)
    {
        if (i > j)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void SwapForBubbleAndInsertion(int index1, int index2, ref int[] arr)
    {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
    protected override bool CondForSelectionAndBubble(int item1, int item2, int k)
    {
        return true;
    }
    protected override void SwapForSelection(int item1, int item2, ref int[] arr)
    {
        return;
    }
}
class SelectionSort : Sorter
{
    protected override int GetJ(int i)
    {
        return i;
    }
    protected override bool Check(int j, int[] arr)
    {
        if (j < arr.Length)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void JStep(ref int j)
    {
        j++;
    }
    protected override bool CondForSelectionAndBubble(int item2, int k, int item1)
    {
        if (item1 > item2)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    protected override void SwapForSelection(int index1, int index2, ref int[] arr)
    {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
    protected override void SwapForBubbleAndInsertion(int index1, int index2, ref int[] arr)
    {
        return;
    }
    protected override bool CheckForInsertion(int i, int j)
    {
        return true;
    }
}
class Program
    {
        static void Main(string[] args)
        {
            int[] arr = { 7, 430, 35, 44, 32, 13, 80, 2, 23 };
            Sorter ob = new InsertionSort();

            Console.WriteLine("Initial Array");
            ob.Output(arr);

            Console.WriteLine("\nInsertionSort");
            ob.Sort(ref arr);

            Console.WriteLine("\nBubbleSort");
            ob = new BubbleSort();
            ob.Sort(ref arr);

            Console.WriteLine("\nSelectionSort");
            ob = new SelectionSort();
            ob.Sort(ref arr);

        }
    }


