using System;

namespace task12
{
    abstract class Sorter
    {
        protected int N = 10;
        protected int[] ar;

        public void Init()
        {
            ar = new int[N];
            Random r = new Random();
            for (int i = 0; i < N; i++)
                ar[i] = r.Next(1, 99);
            for (int i = 0; i < N; i++)
                Console.Write(ar[i] + " ");
        }

        public void Output()
        {
            for (int i = 0; i < N; i++)
                Console.Write(ar[i] + " ");
        }

        public void DoSort() // Template Method
        {
            Init();
            Console.WriteLine();
            for (int j = N - 1; j > 0; j--)
                for (int i = 0; i < N - 1; i++)
                    if (Order(i))
                        Swap(i);
            Output();
            Console.WriteLine();
        }

        protected abstract void Swap(int index);
        protected abstract bool Order(int index);
    }

    class BubbleSorter : Sorter
    {
        protected override void Swap(int i)
        {
            int temp = ar[i];
            ar[i] = ar[i + 1];
            ar[i + 1] = temp;
        }

        protected override bool Order(int i)
        {
            return ar[i] > ar[i + 1];
        }
    }
    class SelectionSorter : Sorter
    {
        protected override void Swap(int index)
        {
            int minIndex = index;
            for (int i = index + 1; i < N; i++)
            {
                if (ar[i] < ar[minIndex])
                    minIndex = i;
            }
            int temp = ar[minIndex];
            ar[minIndex] = ar[index];
            ar[index] = temp;
        }

        protected override bool Order(int index)
        {
            return false;
        }
    }
    class InsertionSorter : Sorter
    {
        protected override void Swap(int index)
        {
            int temp = ar[index];
            ar[index] = ar[index + 1];
            ar[index + 1] = temp;
        }

        protected override bool Order(int index)
        {
            return ar[index] > ar[index + 1];
        }

        public new void DoSort()
        {
            Init();
            Console.WriteLine();
            for (int i = 1; i < N; i++)
            {
                int key = ar[i];
                int j = i - 1;

                while (j >= 0 && ar[j] > key)
                {
                    ar[j + 1] = ar[j];
                    j = j - 1;
                }
                ar[j + 1] = key;
            }
            Output();
            Console.WriteLine();
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("BuubleSort");
            Sorter ob = new BubbleSorter();
            ob.DoSort();
            Console.WriteLine("\nInsertionSort");
            ob = new InsertionSorter();
            ob.DoSort();
            Console.WriteLine("\nSelectionSort");
            ob = new SelectionSorter();
            ob.DoSort();
        }
    }
}
